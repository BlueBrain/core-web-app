import { Quaternion, Vector3 } from './utils/calc';

export type BraynsColorOpaque = [red: number, green: number, blue: number];
export type BraynsColorTransparent = [red: number, green: number, blue: number, alpha: number];

export type BraynsObjects = Array<BraynsMeshOptions>;

export interface BraynsMeshOptions {
  url: string;
  color: string;
}

export interface BraynsServiceInterface {
  /**
   * Define what canvas will receive the frames generated by Brayns Renderer.
   * It's size will be observed to change the viewport accordingly.
   * Only one canvas can be observed at the time, though.
   */
  canvas: HTMLCanvasElement | null;

  /**
   * Export a python file to replay the recorded queries.
   */
  exportQueries(): void;

  /**
   * Write down in the console the stdout and stderr of the UNICORE job.
   */
  downloadLogs(): void;

  reset(): Promise<void>;

  /**
   * Show the morphologies of the selected region.
   * Any other region will be hidden.
   */
  showRegion(circuitPath: string, region: { id: string }): void;
}

export interface BusyEventParams {
  type: 'mesh';
  id: string;
  isLoading: boolean;
}

export interface CameraParams {
  target: Vector3;
  /**
   * Height of the greatest visible plane centered at `target`
   * and perpendicular to the camera axis (Z).
   *
   * In a perspective camera with a FoV of 45Â°, the distance
   * will be half of the height.
   */
  distance: number;
  orientation: Quaternion;
}
