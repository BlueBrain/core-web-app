import { GenericEventInterface } from './utils/generic-event';

export type BraynsColorOpaque = [red: number, green: number, blue: number];
export type BraynsColorTransparent = [red: number, green: number, blue: number, alpha: number];

export type BraynsObjects = Array<BraynsMeshOptions>;

export interface BraynsMeshOptions {
  type: 'mesh';
  url: string;
  color: BraynsColorTransparent;
}

export interface BraynsServiceInterface {
  readonly eventBusy: GenericEventInterface<BusyEventParams>;

  /**
   * Define what canvas will receive the frames generated by Brayns Renderer.
   * It's size will be observed to change the viewport accordingly.
   * Only one canvas can be observed at the time, though.
   */
  canvas: HTMLCanvasElement | null;

  /**
   * Export a python file to replay the recorded queries.
   */
  exportQueries(): void;

  /**
   * Write down in the console the stdout and stderr of the UNICORE job.
   */
  downloadLogs(): void;

  reset(): Promise<void>;

  /**
   * Add a list of meshes to the current scene, but remove any other mesh.
   */
  showMeshes(objects: BraynsObjects): void;

  /**
   * Show the morphologies of the selected region.
   * Any other region will be hidden.
   */
  showRegion(circuitPath: string, region: { id: string }): void;
}

export interface BusyEventParams {
  type: 'mesh';
  id: string;
  isLoading: boolean;
}
